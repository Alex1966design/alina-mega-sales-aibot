import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai_client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ê–ª–∏–Ω–∞, –Ω–µ–π—Ä–æ-—á–µ–º–ø–∏–æ–Ω –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å üöÄ")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    prompt = (
        f"–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. "
        f"–°–µ–π—á–∞—Å –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª: \"{user_input}\". "
        f"–°–Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∏, –≥–æ—Ç–æ–≤ –ª–∏ –æ–Ω —Å–∫–∞–∑–∞—Ç—å ¬´–î–∞¬ª. "
        f"–ï—Å–ª–∏ –¥–∞ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏. "
        f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è ‚Äî –ø—Ä–∏–≤–µ–¥–∏ –º—è–≥–∫–∏–π —à–∞–±–ª–æ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∫–∏. "
        f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≥–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∫–ª–∏–µ–Ω—Ç–∞."
    )

    try:
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
            max_tokens=500
        )

        bot_reply = response.choices[0].message.content
        await update.message.reply_text(bot_reply)

    except Exception as e:
        logging.error(f"OpenAI Error: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
