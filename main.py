from dotenv import load_dotenv
load_dotenv()

import logging
import openai
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# üîê –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ .env
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise ValueError("TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")

logging.basicConfig(level=logging.INFO)

# üß† –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# üëã –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–∏–Ω–∞, –Ω–µ–π—Ä–æ-—á–µ–º–ø–∏–æ–Ω –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º ü§ñ\n–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å.")

# üí¨ –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –æ–±—â–µ–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if user_id not in user_states:
        user_states[user_id] = {"stage": "ask_product"}
        await update.message.reply_text("–ê–ª–∏–Ω–∞ –Ω–∞ —Å–≤—è–∑–∏ ü§ñ –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å?")
        return

    state = user_states[user_id]

    # –°—Ç–∞–¥–∏—è 1 ‚Äî –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
    if state["stage"] == "ask_product":
        product = text
        user_states[user_id]["product"] = product
        user_states[user_id]["stage"] = "generated_usp"

        prompt = (
            f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –Ω–µ–π—Ä–æ–ø—Ä–æ–¥–∞–≤–µ—Ü. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —Ü–µ–ø–ª—è—é—â–µ–µ –£–¢–ü –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Å—Ç–∏–ª–µ "
            f"–¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product}. –£–¢–ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º –≤ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö."
        )

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            usp = response.choices[0].message.content
            await update.message.reply_text(f"–í–æ—Ç —á—Ç–æ —è –ø—Ä–∏–¥—É–º–∞–ª–∞:\n\nüí° *{usp}*", parse_mode="Markdown")
            await update.message.reply_text("–•–æ—á–µ—à—å, –ø–æ–º–æ–≥—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–ª—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫—Ä–∏–ø—Ç–∞?")
        except Exception as e:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI üò•")
            logging.error(e)

        return

    # –°—Ç–∞–¥–∏—è 2 ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç "–î–∞"
    if text.lower() == "–¥–∞" and state["stage"] == "generated_usp":
        product = state["product"]
        user_states[user_id]["stage"] = "done"

        prompt = (
            f"–¢—ã ‚Äî –Ω–µ–π—Ä–æ–ø—Ä–æ–¥–∞–≤–µ—Ü —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Å—Ç–∏–ª–µ–º –æ–±—â–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product}.\n"
            f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: 1) –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, 2) –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, 3) –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–æ—Ñ—Ñ–µ—Ä), 4) –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ.\n"
            f"–ó–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏ 3 –¥—Ä—É–∂–µ–ª—é–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è."
        )

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            script = response.choices[0].message.content
            await update.message.reply_text(f"üìã –í–æ—Ç —Ç–≤–æ–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–∞–∂:\n\n{script}")
        except Exception as e:
            await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç üò¢ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            logging.error(e)

        return

    # –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ \"–î–∞\", –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å–æ—Å—Ç–∞–≤–∏–ª–∞ —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–∞–∂ üí¨")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = Application.builder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

app.run_polling()
