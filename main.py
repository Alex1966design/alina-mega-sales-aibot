from dotenv import load_dotenv
load_dotenv()

import logging
import os
import openai
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# üîê –ö–ª—é—á–∏ –∏–∑ .env
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_KEY

if not TELEGRAM_TOKEN or not OPENAI_KEY:
    raise ValueError("TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")

logging.basicConfig(level=logging.INFO)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–∏–Ω–∞ ü§ñ, –Ω–µ–π—Ä–æ-—á–µ–º–ø–∏–æ–Ω –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º üí¨\n"
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å–æ—Å—Ç–∞–≤–∏–ª–∞ —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–∞–∂ üß†"
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–¥–∞–∂
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()

    # –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è OpenAI
    prompt = (
        "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –Ω–µ–π—Ä–æ–ø—Ä–æ–¥–∞–≤–µ—Ü. "
        "–°–æ—Å—Ç–∞–≤—å —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–∞–∂, –Ω–∞—á–∏–Ω–∞—è —Å –≤–æ–ø—Ä–æ—Å–∞ '–î–∞?', –≤–∫–ª—é—á–∏ —à–∞–±–ª–æ–Ω—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏, "
        "–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–º —Å—Ç–∏–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ. –í–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è:\n\n"
        f"{user_message}"
    )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        script = response.choices[0].message.content
        await update.message.reply_text(f"–í–æ—Ç —Ç–≤–æ–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–∞–∂:\n\n{script}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = Application.builder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

app.run_polling()
